#include "parser.hpp"
#include <string>

#include "antlr4-runtime.h"
#include "parse/grammar/autogenerated/REmatchLexer.h"
#include "visitors.hpp"

namespace rematch {

std::unique_ptr<LogicalVA> regex2LVA(std::string regex) {
  std::cout << "Input:" << std::endl;
  std::cout << regex << std::endl;

  // Build parse tree
  antlr4::ANTLRInputStream stream(regex);
  REmatchLexer lexer(&stream);
  antlr4::CommonTokenStream tokens(&lexer);
  REmatchParser parser(&tokens);
  REmatchParser::RootContext* root = parser.root();
  std::cout << "1. Parse Tree Built." << std::endl;
  
  // Build Variable Factory
  VariableFactoryVisitor vfv;
  VariableFactory vfact = std::any_cast<VariableFactory>(vfv.visitRoot(root));
  std::cout << "2. Variable Factory Built." << std::endl;
  std::cout << vfact.pprint() << std::endl;

  // TODO: Build Filter Factory
  // FilterFactoryVisitor ffv;
  // ffv.visitRoot(root);
  // std::cout << "3. Filter Factory Built." << std::endl;
  // std::cout << ffv.ffact.pprint() << std::endl;

  // TODO: Build Logical VA

  // return A;


  // ast::altern tree;

  // doParse(regex, tree);

  // std::shared_ptr<VariableFactory> v = visitors::regex2vars()(tree);

  // auto v1 = visitors::regex2filters();
  // v1(tree);
  // std::shared_ptr<FilterFactory> f = v1.get_factory();

  // auto A = visitors::regex2LVA(v,f)(tree);
  // A->set_factories(v, f);

  // return A;
  return 0;
}

}  // end namespace rematch