#pragma once

#include "antlr4-runtime.h"
#include "exceptions.hpp"
#include "factories/factories.hpp"
#include "parse/grammar/autogenerated/REmatchParserBaseVisitor.h"

namespace rematch {
namespace visitors {
class FilterFactoryVisitor : public REmatchParserBaseVisitor {
public:
  FilterFactory get_ffact(REmatchParser::RootContext *ctx) {
    visitRoot(ctx);
    return ffact;
  }

private:
  FilterFactory ffact;

  std::any visitLiteral(REmatchParser::LiteralContext *ctx) override {
    if (ctx->special() || ctx->escapes()) {
      ffact.add_filter(ctx);
    }
    else if (ctx->other()) {
      for (char c : ctx->getText()) {
        ffact.add_filter(c);
      }
    }
    return 0;
  }

  std::any visitSharedAtom(REmatchParser::SharedAtomContext *ctx) override {
    ffact.add_filter(ctx);
    return 0;
  }

  std::any
  visitCharacterClass(REmatchParser::CharacterClassContext *ctx) override {
    ffact.add_filter(ctx);
    return 0;
  }
};
} // namespace visitors
} // namespace rematch