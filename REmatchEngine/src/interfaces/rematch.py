# This file was automatically generated by SWIG (http://www.swig.org).
# Version 4.0.2
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.

from sys import version_info as _swig_python_version_info
if _swig_python_version_info < (2, 7, 0):
    raise RuntimeError("Python 2.7 or later required")

# Import the low-level C/C++ module
if __package__ or "." in __name__:
    from . import _rematch
else:
    import _rematch

try:
    import builtins as __builtin__
except ImportError:
    import __builtin__

def _swig_repr(self):
    try:
        strthis = "proxy of " + self.this.__repr__()
    except __builtin__.Exception:
        strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)


def _swig_setattr_nondynamic_instance_variable(set):
    def set_instance_attr(self, name, value):
        if name == "thisown":
            self.this.own(value)
        elif name == "this":
            set(self, name, value)
        elif hasattr(self, name) and isinstance(getattr(type(self), name), property):
            set(self, name, value)
        else:
            raise AttributeError("You cannot add instance attributes to %s" % self)
    return set_instance_attr


def _swig_setattr_nondynamic_class_variable(set):
    def set_class_attr(cls, name, value):
        if hasattr(cls, name) and not isinstance(getattr(cls, name), property):
            set(cls, name, value)
        else:
            raise AttributeError("You cannot add class attributes to %s" % cls)
    return set_class_attr


def _swig_add_metaclass(metaclass):
    """Class decorator for adding a metaclass to a SWIG wrapped class - a slimmed down version of six.add_metaclass"""
    def wrapper(cls):
        return metaclass(cls.__name__, cls.__bases__, cls.__dict__.copy())
    return wrapper


class _SwigNonDynamicMeta(type):
    """Meta class to enforce nondynamic attributes (no new attributes) for a class"""
    __setattr__ = _swig_setattr_nondynamic_class_variable(type.__setattr__)


class SwigPyIterator(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")

    def __init__(self, *args, **kwargs):
        raise AttributeError("No constructor defined - class is abstract")
    __repr__ = _swig_repr
    __swig_destroy__ = _rematch.delete_SwigPyIterator

    def value(self):
        return _rematch.SwigPyIterator_value(self)

    def incr(self, n=1):
        return _rematch.SwigPyIterator_incr(self, n)

    def decr(self, n=1):
        return _rematch.SwigPyIterator_decr(self, n)

    def distance(self, x):
        return _rematch.SwigPyIterator_distance(self, x)

    def equal(self, x):
        return _rematch.SwigPyIterator_equal(self, x)

    def copy(self):
        return _rematch.SwigPyIterator_copy(self)

    def next(self):
        return _rematch.SwigPyIterator_next(self)

    def __next__(self):
        return _rematch.SwigPyIterator___next__(self)

    def previous(self):
        return _rematch.SwigPyIterator_previous(self)

    def advance(self, n):
        return _rematch.SwigPyIterator_advance(self, n)

    def __eq__(self, x):
        return _rematch.SwigPyIterator___eq__(self, x)

    def __ne__(self, x):
        return _rematch.SwigPyIterator___ne__(self, x)

    def __iadd__(self, n):
        return _rematch.SwigPyIterator___iadd__(self, n)

    def __isub__(self, n):
        return _rematch.SwigPyIterator___isub__(self, n)

    def __add__(self, n):
        return _rematch.SwigPyIterator___add__(self, n)

    def __sub__(self, *args):
        return _rematch.SwigPyIterator___sub__(self, *args)
    def __iter__(self):
        return self

# Register SwigPyIterator in _rematch:
_rematch.SwigPyIterator_swigregister(SwigPyIterator)

class PairSize(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _rematch.PairSize_swiginit(self, _rematch.new_PairSize(*args))
    first = property(_rematch.PairSize_first_get, _rematch.PairSize_first_set)
    second = property(_rematch.PairSize_second_get, _rematch.PairSize_second_set)
    def __len__(self):
        return 2
    def __repr__(self):
        return str((self.first, self.second))
    def __getitem__(self, index): 
        if not (index % 2):
            return self.first
        else:
            return self.second
    def __setitem__(self, index, val):
        if not (index % 2):
            self.first = val
        else:
            self.second = val
    __swig_destroy__ = _rematch.delete_PairSize

# Register PairSize in _rematch:
_rematch.PairSize_swigregister(PairSize)

class StrVector(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def iterator(self):
        return _rematch.StrVector_iterator(self)
    def __iter__(self):
        return self.iterator()

    def __nonzero__(self):
        return _rematch.StrVector___nonzero__(self)

    def __bool__(self):
        return _rematch.StrVector___bool__(self)

    def __len__(self):
        return _rematch.StrVector___len__(self)

    def __getslice__(self, i, j):
        return _rematch.StrVector___getslice__(self, i, j)

    def __setslice__(self, *args):
        return _rematch.StrVector___setslice__(self, *args)

    def __delslice__(self, i, j):
        return _rematch.StrVector___delslice__(self, i, j)

    def __delitem__(self, *args):
        return _rematch.StrVector___delitem__(self, *args)

    def __getitem__(self, *args):
        return _rematch.StrVector___getitem__(self, *args)

    def __setitem__(self, *args):
        return _rematch.StrVector___setitem__(self, *args)

    def pop(self):
        return _rematch.StrVector_pop(self)

    def append(self, x):
        return _rematch.StrVector_append(self, x)

    def empty(self):
        return _rematch.StrVector_empty(self)

    def size(self):
        return _rematch.StrVector_size(self)

    def swap(self, v):
        return _rematch.StrVector_swap(self, v)

    def begin(self):
        return _rematch.StrVector_begin(self)

    def end(self):
        return _rematch.StrVector_end(self)

    def rbegin(self):
        return _rematch.StrVector_rbegin(self)

    def rend(self):
        return _rematch.StrVector_rend(self)

    def clear(self):
        return _rematch.StrVector_clear(self)

    def get_allocator(self):
        return _rematch.StrVector_get_allocator(self)

    def pop_back(self):
        return _rematch.StrVector_pop_back(self)

    def erase(self, *args):
        return _rematch.StrVector_erase(self, *args)

    def __init__(self, *args):
        _rematch.StrVector_swiginit(self, _rematch.new_StrVector(*args))

    def push_back(self, x):
        return _rematch.StrVector_push_back(self, x)

    def front(self):
        return _rematch.StrVector_front(self)

    def back(self):
        return _rematch.StrVector_back(self)

    def assign(self, n, x):
        return _rematch.StrVector_assign(self, n, x)

    def resize(self, *args):
        return _rematch.StrVector_resize(self, *args)

    def insert(self, *args):
        return _rematch.StrVector_insert(self, *args)

    def reserve(self, n):
        return _rematch.StrVector_reserve(self, n)

    def capacity(self):
        return _rematch.StrVector_capacity(self)
    __swig_destroy__ = _rematch.delete_StrVector

# Register StrVector in _rematch:
_rematch.StrVector_swigregister(StrVector)

class MatchUniquePtr(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _rematch.MatchUniquePtr_swiginit(self, _rematch.new_MatchUniquePtr(*args))

    def __deref__(self):
        return _rematch.MatchUniquePtr___deref__(self)

    def release(self):
        return _rematch.MatchUniquePtr_release(self)

    def reset(self, *args):
        return _rematch.MatchUniquePtr_reset(self, *args)

    def swap(self, __u):
        return _rematch.MatchUniquePtr_swap(self, __u)

    def get(self):
        return _rematch.MatchUniquePtr_get(self)

    def __nonzero__(self):
        return _rematch.MatchUniquePtr___nonzero__(self)
    __bool__ = __nonzero__


    __swig_destroy__ = _rematch.delete_MatchUniquePtr

    def start(self, varname):
        return _rematch.MatchUniquePtr_start(self, varname)

    def end(self, varname):
        return _rematch.MatchUniquePtr_end(self, varname)

    def span(self, var):
        return _rematch.MatchUniquePtr_span(self, var)

    def variables(self):
        return _rematch.MatchUniquePtr_variables(self)

# Register MatchUniquePtr in _rematch:
_rematch.MatchUniquePtr_swigregister(MatchUniquePtr)

class RegExOptions(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rematch.RegExOptions_swiginit(self, _rematch.new_RegExOptions())

    def multi_line(self):
        return _rematch.RegExOptions_multi_line(self)

    def set_multi_line(self, b):
        return _rematch.RegExOptions_set_multi_line(self, b)

    def line_by_line(self):
        return _rematch.RegExOptions_line_by_line(self)

    def set_line_by_line(self, b):
        return _rematch.RegExOptions_set_line_by_line(self, b)

    def dot_nl(self):
        return _rematch.RegExOptions_dot_nl(self)

    def set_dot_nl(self, b):
        return _rematch.RegExOptions_set_dot_nl(self, b)

    def start_anchor(self):
        return _rematch.RegExOptions_start_anchor(self)

    def set_start_anchor(self, b):
        return _rematch.RegExOptions_set_start_anchor(self, b)

    def end_anchor(self):
        return _rematch.RegExOptions_end_anchor(self)

    def set_end_anchor(self, b):
        return _rematch.RegExOptions_set_end_anchor(self, b)

    def early_output(self):
        return _rematch.RegExOptions_early_output(self)

    def set_early_output(self, b):
        return _rematch.RegExOptions_set_early_output(self, b)

    def save_anchors(self):
        return _rematch.RegExOptions_save_anchors(self)

    def set_save_anchors(self, b):
        return _rematch.RegExOptions_set_save_anchors(self, b)
    __swig_destroy__ = _rematch.delete_RegExOptions

# Register RegExOptions in _rematch:
_rematch.RegExOptions_swigregister(RegExOptions)

class Match(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self):
        _rematch.Match_swiginit(self, _rematch.new_Match())

    def start(self, varname):
        return _rematch.Match_start(self, varname)

    def end(self, varname):
        return _rematch.Match_end(self, varname)

    def span(self, var):
        return _rematch.Match_span(self, var)

    def variables(self):
        return _rematch.Match_variables(self)
    __swig_destroy__ = _rematch.delete_Match

# Register Match in _rematch:
_rematch.Match_swigregister(Match)

class EvaluatorIter(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def next(self):
        return _rematch.EvaluatorIter_next(self)

    def __init__(self):
        _rematch.EvaluatorIter_swiginit(self, _rematch.new_EvaluatorIter())
    __swig_destroy__ = _rematch.delete_EvaluatorIter

# Register EvaluatorIter in _rematch:
_rematch.EvaluatorIter_swigregister(EvaluatorIter)

class RegEx(object):
    thisown = property(lambda x: x.this.own(), lambda x, v: x.this.own(v), doc="The membership flag")
    __repr__ = _swig_repr

    def __init__(self, *args):
        _rematch.RegEx_swiginit(self, _rematch.new_RegEx(*args))
    __swig_destroy__ = _rematch.delete_RegEx

    def find(self, text):
        return _rematch.RegEx_find(self, text)

    def findIter(self, text):
        return _rematch.RegEx_findIter(self, text)

    def varScheme(self):
        return _rematch.RegEx_varScheme(self)

# Register RegEx in _rematch:
_rematch.RegEx_swigregister(RegEx)



